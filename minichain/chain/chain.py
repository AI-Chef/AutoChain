"""Base interface that all chains should implement."""
import time
from abc import ABC, abstractmethod
from typing import Any, Dict, Optional, Sequence, Tuple, List, Union

from pydantic import BaseModel

from minichain.agent.support_agent import SupportAgent
from minichain.errors import ToolRunningError
from minichain.memory.base import BaseMemory
from minichain.structs import AgentAction, AgentFinish
from minichain.tools.base import Tool


class BaseChain(BaseModel, ABC):
    """Base interface that all chains should implement."""

    memory: Optional[BaseMemory] = None
    verbosity: str = ""
    agent: SupportAgent
    tools: Sequence[Tool]

    @property
    def _chain_type(self) -> str:
        raise NotImplementedError("Saving not supported for this chain type.")

    @abstractmethod
    def _run(
        self,
        inputs: Dict[str, Any],
    ) -> AgentFinish:
        """Run the logic of this chain and return the output."""

    def run(
        self,
        user_query: str,
        return_only_outputs: bool = False,
    ) -> Union[AgentFinish, Dict[str, Any]]:
        """Run the logic of this chain and add to output if desired.

        Args:
            user_query: user query
            return_only_outputs: boolean for whether to return only outputs in the
                response. If True, only new keys generated by this chain will be
                returned. If False, both input keys and new keys generated by this
                chain will be returned. Defaults to False.

        """
        inputs = self.prep_inputs(user_query)

        try:
            outputs = self._run(inputs)
        except (KeyboardInterrupt, Exception) as e:
            raise e

        return self.prep_outputs(inputs, outputs, return_only_outputs)

    def prep_inputs(self, user_query: str) -> Dict[str, str]:
        """Validate and prep inputs."""
        inputs = {
            "query": user_query,
        }
        if self.memory is not None:
            external_context = self.memory.load_memory()

            inputs.update(external_context)
        return inputs

    def prep_outputs(
        self,
        inputs: Dict[str, str],
        outputs: AgentFinish,
        return_only_outputs: bool = False,
    ) -> Dict[str, Any]:
        """Validate and prep outputs."""
        outputs = outputs.format_output()
        if self.memory is not None:
            self.memory.save_memory(inputs=inputs, outputs=outputs)

        if return_only_outputs:
            return outputs
        else:
            return {**inputs, **outputs}


class DefaultChain(BaseChain):
    return_intermediate_steps: bool = False
    max_iterations: Optional[int] = 15
    max_execution_time: Optional[float] = None
    handle_parsing_errors = True

    def _should_continue(self, iterations: int, time_elapsed: float) -> bool:
        if self.max_iterations is not None and iterations >= self.max_iterations:
            return False
        if (
            self.max_execution_time is not None
            and time_elapsed >= self.max_execution_time
        ):
            return False

        return True

    def _take_next_step(
        self,
        name_to_tool_map: Dict[str, Tool],
        inputs: Dict[str, str],
        intermediate_steps: List[Tuple[AgentAction, str]],
    ) -> (AgentFinish, AgentAction):
        try:
            # Call the LLM to see what to do.
            output = self.agent.plan(
                intermediate_steps,
                **inputs,
            )
        except Exception as e:
            if not self.handle_parsing_errors:
                raise e
            text = str(e).split("`")[1]
            observation = f"Invalid or incomplete response"
            output = AgentAction("_Exception",
                                 tool_input=observation,
                                 log=text,
                                 response=text,
                                 observation=observation)
            return output

        # If the tool chosen is the finishing tool, then we end and return.
        if isinstance(output, AgentFinish):
            return output

        if isinstance(output, AgentAction):
            observation = ""
            # Otherwise we lookup the tool
            if output.tool in name_to_tool_map:
                tool = name_to_tool_map[output.tool]
                # We then call the tool on the tool input to get an observation
                try:
                    observation = tool.run(output.tool_input)
                except ToolRunningError as e:
                    new_agent_action = self.agent.fix_action_input(tool, output,
                                                                   error=str(e))
                    if new_agent_action.tool_input != output.tool_input:
                        observation = tool.run(output.tool_input)

            else:
                observation = f"Tool {output.tool} if not supported"

            output.observation = observation
            return output
        else:
            raise ValueError(f"Unsupported action: {type(output)}")

    def _run(
        self,
        inputs: Dict[str, Any],
    ) -> AgentFinish:
        """Run text through and get agent response."""
        # Construct a mapping of tool name to tool for easy lookup

        name_to_tool_map = {tool.name: tool for tool in self.tools}
        # We construct a mapping from each tool to a color, used for logging.
        # color_mapping = get_color_mapping(
        #     [tool.name for tool in self.tools], excluded_colors=["green"]
        # )

        intermediate_steps: List[AgentAction] = []
        # Let's start tracking the number of iterations and time elapsed
        iterations = 0
        time_elapsed = 0.0
        start_time = time.time()
        # We now enter the agent loop (until it returns something).
        while self._should_continue(iterations, time_elapsed):
            print(f"\nInputs: {inputs}\n Intermediate steps: {intermediate_steps}\n")
            next_step_output = self._take_next_step(
                name_to_tool_map,
                inputs,
                intermediate_steps,
            )
            if isinstance(next_step_output, AgentFinish):
                next_step_output.intermediate_steps = intermediate_steps
                return next_step_output

            intermediate_steps.append(next_step_output)
            iterations += 1
            time_elapsed = time.time() - start_time
        # force the termination
        output = AgentFinish(
            return_values={"output": "Agent stopped due to iteration limit or time limit."},
            log="",
            intermediate_steps=intermediate_steps
        )
        return output
